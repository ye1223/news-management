{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return clamp(value, modeValue, particleValue);\n  }\n}\nexport class Bubbler extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n      container.bubble.clicking = true;\n    };\n  }\n  clear(particle, delta, force) {\n    if (particle.bubble.inRange && !force) {\n      return;\n    }\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n  init() {\n    const container = this.container,\n      bubble = container.actualOptions.interactivity.modes.bubble;\n    if (!bubble) {\n      return;\n    }\n    container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n    if (bubble.size !== undefined) {\n      container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n    }\n  }\n  async interact(delta) {\n    const options = this.container.actualOptions,\n      events = options.interactivity.events,\n      onHover = events.onHover,\n      onClick = events.onClick,\n      hoverEnabled = onHover.enable,\n      hoverMode = onHover.mode,\n      clickEnabled = onClick.enable,\n      clickMode = onClick.mode,\n      divs = events.onDiv;\n    if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n      this.hoverBubble(delta);\n    } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n      this.clickBubble(delta);\n    } else {\n      divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(delta, selector, div));\n    }\n  }\n  isEnabled(particle) {\n    var _a;\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n      divs = events.onDiv,\n      divBubble = isDivModeEnabled(\"bubble\", divs);\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n  }\n  loadModeOptions(options, ...sources) {\n    if (!options.bubble) {\n      options.bubble = new Bubble();\n    }\n    for (const source of sources) {\n      options.bubble.load(source === null || source === void 0 ? void 0 : source.bubble);\n    }\n  }\n  reset(particle) {\n    particle.bubble.inRange = false;\n  }\n  clickBubble(delta) {\n    var _a, _b;\n    const container = this.container,\n      options = container.actualOptions,\n      mouseClickPos = container.interactivity.mouse.clickPosition,\n      bubble = options.interactivity.modes.bubble;\n    if (!bubble || !mouseClickPos) {\n      return;\n    }\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    const distance = container.retina.bubbleModeDistance;\n    if (!distance || distance < 0) {\n      return;\n    }\n    const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p));\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n        distMouse = getDistance(pos, mouseClickPos),\n        timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n      if (timeSpent > bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n      if (timeSpent > bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= distance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n  hoverBubble(delta) {\n    const container = this.container,\n      mousePos = container.interactivity.mouse.position,\n      distance = container.retina.bubbleModeDistance;\n    if (!distance || distance < 0 || mousePos === undefined) {\n      return;\n    }\n    const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n        pointDistance = getDistance(pos, mousePos),\n        ratio = 1 - pointDistance / distance;\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n      if (container.interactivity.status === mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n    if (!bubbleOptions) {\n      return;\n    }\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n      if (!modeColor) {\n        return;\n      }\n      const bubbleColor = itemFromSingleOrMultiple(modeColor);\n      particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n    }\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c, _d;\n    const container = this.container,\n      options = container.actualOptions,\n      modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : (_b = options.interactivity.modes.bubble) === null || _b === void 0 ? void 0 : _b.opacity;\n    if (!modeOpacity) {\n      return;\n    }\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_d = (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n      modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n    if (modeSize === undefined) {\n      return;\n    }\n    const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n      bubbleParam = data.bubbleObj.optValue,\n      options = container.actualOptions,\n      bubble = options.interactivity.modes.bubble;\n    if (!bubble || bubbleParam === undefined) {\n      return;\n    }\n    const bubbleDuration = bubble.duration,\n      bubbleDistance = container.retina.bubbleModeDistance,\n      particlesParam = data.particlesObj.optValue,\n      pObjBubble = data.bubbleObj.value,\n      pObj = data.particlesObj.value || 0,\n      type = data.type;\n    if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n      return;\n    }\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n  singleSelectorHover(delta, selector, div) {\n    const container = this.container,\n      selectors = document.querySelectorAll(selector),\n      bubble = container.actualOptions.interactivity.modes.bubble;\n    if (!bubble || !selectors.length) {\n      return;\n    }\n    selectors.forEach(item => {\n      const elem = item,\n        pxRatio = container.retina.pixelRatio,\n        pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n        repulseRadius = elem.offsetWidth / 2 * pxRatio,\n        area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n        query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n        particle.bubble.inRange = true;\n        const divs = bubble.divs;\n        const divBubble = divMode(divs, elem);\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.clear(particle, delta, true);\n          particle.bubble.div = elem;\n        }\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n}","map":{"version":3,"names":["Circle","ExternalInteractorBase","Rectangle","clamp","colorMix","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromSingleOrMultiple","mouseLeaveEvent","mouseMoveEvent","rangeColorToHsl","rgbToHsl","Bubble","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","constructor","container","bubble","handleClickMode","mode","clicking","clear","particle","delta","force","inRange","div","opacity","radius","color","init","actualOptions","interactivity","modes","retina","bubbleModeDistance","distance","pixelRatio","size","undefined","bubbleModeSize","interact","options","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","divs","onDiv","hoverBubble","clickBubble","selector","singleSelectorHover","isEnabled","_a","mouse","divBubble","position","clickPosition","loadModeOptions","sources","source","load","reset","_b","mouseClickPos","query","particles","quadTree","queryCircle","p","durationEnd","pos","getPosition","distMouse","timeSpent","Date","getTime","clickTime","duration","sizeData","bubbleObj","optValue","particlesObj","type","process","opacityData","hoverBubbleColor","mousePos","pointDistance","status","hoverBubbleSize","hoverBubbleOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","mix","pColor","getFillColor","_c","_d","modeOpacity","optOpacity","pOpacity","modeSize","optSize","pSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","obj","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","contains"],"sources":["/Users/liuye/Desktop/dev/news-management/admin/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble(delta);\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble(delta);\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source === null || source === void 0 ? void 0 : source.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n    clickBubble(delta) {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubble = options.interactivity.modes.bubble;\n        if (!bubble || !mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= distance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble(delta) {\n        const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n        if (!distance || distance < 0 || mousePos === undefined) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!bubbleOptions) {\n            return;\n        }\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = itemFromSingleOrMultiple(modeColor);\n            particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c, _d;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : (_b = options.interactivity.modes.bubble) === null || _b === void 0 ? void 0 : _b.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_d = (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubble = options.interactivity.modes.bubble;\n        if (!bubble || bubbleParam === undefined) {\n            return;\n        }\n        const bubbleDuration = bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    singleSelectorHover(delta, selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble || !selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.clear(particle, delta, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}